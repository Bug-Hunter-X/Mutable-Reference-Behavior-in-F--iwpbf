The behavior is not a bug but a direct consequence of how mutable references are managed in F#.  To avoid unexpected behavior, carefully consider when and where to use mutable references.  Favor immutable values and data structures when possible.  If mutability is necessary, ensure you understand the implications of assigning and modifying references. The code works correctly, but the behavior may be unexpected.  For example, consider using immutable data structures or functional approaches to avoid similar situations in your F# code. 